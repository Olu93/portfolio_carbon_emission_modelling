digraph "classes" {
rankdir=BT
charset="utf-8"
"_datetime.datetime.date" [color="grey", fontcolor="black", label=<{_datetime.datetime.date|day<br ALIGN="LEFT"/>month<br ALIGN="LEFT"/>year<br ALIGN="LEFT"/>|ctime()<br ALIGN="LEFT"/>fromisocalendar(year, week, day)<br ALIGN="LEFT"/>fromisoformat(date_string)<br ALIGN="LEFT"/>fromordinal(n)<br ALIGN="LEFT"/>fromtimestamp(t)<br ALIGN="LEFT"/>isocalendar()<br ALIGN="LEFT"/>isoformat()<br ALIGN="LEFT"/>isoweekday()<br ALIGN="LEFT"/>replace(year, month, day)<br ALIGN="LEFT"/>strftime(fmt)<br ALIGN="LEFT"/>timetuple()<br ALIGN="LEFT"/>today()<br ALIGN="LEFT"/>toordinal()<br ALIGN="LEFT"/>weekday()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"_datetime.datetime.datetime" [color="grey", fontcolor="black", label=<{_datetime.datetime.datetime|fold<br ALIGN="LEFT"/>hour<br ALIGN="LEFT"/>microsecond<br ALIGN="LEFT"/>minute<br ALIGN="LEFT"/>second<br ALIGN="LEFT"/>tzinfo<br ALIGN="LEFT"/>|astimezone(tz)<br ALIGN="LEFT"/>combine(date, time, tzinfo)<br ALIGN="LEFT"/>ctime()<br ALIGN="LEFT"/>date()<br ALIGN="LEFT"/>dst()<br ALIGN="LEFT"/>fromisoformat(date_string)<br ALIGN="LEFT"/>fromtimestamp(t, tz)<br ALIGN="LEFT"/>isoformat(sep, timespec)<br ALIGN="LEFT"/>now(tz)<br ALIGN="LEFT"/>replace(year, month, day, hour, minute, second, microsecond, tzinfo)<br ALIGN="LEFT"/>strptime(date_string, format)<br ALIGN="LEFT"/>time()<br ALIGN="LEFT"/>timestamp()<br ALIGN="LEFT"/>timetuple()<br ALIGN="LEFT"/>timetz()<br ALIGN="LEFT"/>tzname()<br ALIGN="LEFT"/>utcfromtimestamp(t)<br ALIGN="LEFT"/>utcnow()<br ALIGN="LEFT"/>utcoffset()<br ALIGN="LEFT"/>utctimetuple()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"abc.ABC" [color="grey", fontcolor="black", label=<{abc.ABC|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"base.common.DefaultClassificationEvaluator" [color="aliceblue", fontcolor="black", label=<{base.common.DefaultClassificationEvaluator|<br ALIGN="LEFT"/>|evaluate(y_true, y_pred)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.DefaultClusterEvaluator" [color="aliceblue", fontcolor="black", label=<{base.common.DefaultClusterEvaluator|<br ALIGN="LEFT"/>|evaluate(X, labels)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariConfidenceEstimator.DefaultConfidenceEvaluator" [color="antiquewhite", fontcolor="black", label=<{base.common.DefaultConfidenceEvaluator|<br ALIGN="LEFT"/>|evaluate(y_true: pd.Series, y_pred: pd.DataFrame)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariImputer.DefaultImputerEvaluator" [color="antiquewhite", fontcolor="black", label=<{base.common.DefaultImputerEvaluator|<br ALIGN="LEFT"/>|evaluate(y_true, y_pred)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.DefaultOptimizer" [color="aliceblue", fontcolor="black", label=<{base.common.DefaultOptimizer|<br ALIGN="LEFT"/>|optimize(X_train, y_train, X_val, y_val): Tuple[dict, Any]<br ALIGN="LEFT"/>score_trial(trial: optuna.Trial, X_train, y_train, X_val, y_val): Number<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.DefaultPostprocessor" [color="aliceblue", fontcolor="black", label=<{base.common.DefaultPostprocessor|<br ALIGN="LEFT"/>|run(X, y): 'OxariPostprocessor'<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.DefaultRegressorEvaluator" [color="aliceblue", fontcolor="black", label=<{base.common.DefaultRegressorEvaluator|<br ALIGN="LEFT"/>|evaluate(y_true, y_pred)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.DummyConfidenceEstimator" [color="aliceblue", fontcolor="black", label=<{base.common.DummyConfidenceEstimator|max_ : ndarray<br ALIGN="LEFT"/>min_ : ndarray<br ALIGN="LEFT"/>|fit(X, y): 'OxariRegressor'<br ALIGN="LEFT"/>predict(X): ArrayLike<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariClassifier" [color="aliceblue", fontcolor="black", label=<{base.common.OxariClassifier|<br ALIGN="LEFT"/>|<I>fit</I>(X, y): Self<br ALIGN="LEFT"/><I>predict</I>(X): ArrayLike<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariConfidenceEstimator" [color="aliceblue", fontcolor="black", label=<{base.common.OxariConfidenceEstimator|alpha : float<br ALIGN="LEFT"/>evaluation_results<br ALIGN="LEFT"/>evaluator<br ALIGN="LEFT"/>pipeline : Optional[OxariPipeline]<br ALIGN="LEFT"/>|evaluate(X, y): Self<br ALIGN="LEFT"/>set_pipeline(pipeline: OxariPipeline): Self<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariEvaluator" [color="aliceblue", fontcolor="black", label=<{base.common.OxariEvaluator|name<br ALIGN="LEFT"/>|<I>evaluate</I>(y_true, y_pred)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariFeatureReducer" [color="aliceblue", fontcolor="black", label=<{base.common.OxariFeatureReducer|ignored_features_ : list<br ALIGN="LEFT"/>n_components_ : NoneType<br ALIGN="LEFT"/>|<I>fit</I>(X, y): 'OxariFeatureReducer'<br ALIGN="LEFT"/>get_config(deep)<br ALIGN="LEFT"/>merge(old_data: pd.DataFrame, new_data: pd.DataFrame)<br ALIGN="LEFT"/>merge_with_ignored_columns(old_data: pd.DataFrame, new_data: pd.DataFrame)<br ALIGN="LEFT"/><I>transform</I>(X): ArrayLike<br ALIGN="LEFT"/>visualize(X, y)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariFeatureTransformer" [color="aliceblue", fontcolor="black", label=<{base.common.OxariFeatureTransformer|<br ALIGN="LEFT"/>|fit(X, y): Self<br ALIGN="LEFT"/>fit_transform(X, y)<br ALIGN="LEFT"/><I>reverse_transform</I>(X): ArrayLike<br ALIGN="LEFT"/><I>transform</I>(X, y): ArrayLike<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariImputer" [color="aliceblue", fontcolor="black", label=<{base.common.OxariImputer|copy : bool<br ALIGN="LEFT"/>evaluation_results<br ALIGN="LEFT"/>verbose : int<br ALIGN="LEFT"/>|clone(): Self<br ALIGN="LEFT"/>evaluate(X: pd.DataFrame, y): Self<br ALIGN="LEFT"/><I>fit</I>(X: ArrayLike, y): Self<br ALIGN="LEFT"/><I>transform</I>(X: ArrayLike): ArrayLike<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariLinearAnnualReduction" [color="aliceblue", fontcolor="black", label=<{base.common.OxariLinearAnnualReduction|params : dict<br ALIGN="LEFT"/>|<I>fit</I>(X, y): Self<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariLoggerMixin" [color="aliceblue", fontcolor="black", label=<{base.common.OxariLoggerMixin|logger<br ALIGN="LEFT"/>logger_name : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"base.common.OxariMetaModel" [color="aliceblue", fontcolor="black", label=<{base.common.OxariMetaModel|creation_time<br ALIGN="LEFT"/>feature_names_in_<br ALIGN="LEFT"/>pickle_package : str<br ALIGN="LEFT"/>pickle_version : str<br ALIGN="LEFT"/>pipelines : Dict[str, OxariPipeline]<br ALIGN="LEFT"/>python_version : str<br ALIGN="LEFT"/>statistics : dict<br ALIGN="LEFT"/>|add_pipeline(scope: int, pipeline: OxariPipeline): 'OxariMetaModel'<br ALIGN="LEFT"/>check_scope(scope)<br ALIGN="LEFT"/>collect_eval_results(): List[dict]<br ALIGN="LEFT"/>evaluate(X_train, y_train, X_test, y_test, M): Self<br ALIGN="LEFT"/>fit(X: pd.DataFrame, y)<br ALIGN="LEFT"/>get_features(scope: int): ArrayLike<br ALIGN="LEFT"/>get_pipeline(scope: int): OxariPipeline<br ALIGN="LEFT"/>predict(X): ArrayLike<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariMixin" [color="aliceblue", fontcolor="black", label=<{base.common.OxariMixin|end_time : NoneType<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>params : dict<br ALIGN="LEFT"/>start_time : NoneType<br ALIGN="LEFT"/>|clone(): OxariMixin<br ALIGN="LEFT"/>evaluate(y_true, y_pred): Self<br ALIGN="LEFT"/>get_config(deep)<br ALIGN="LEFT"/>get_params(deep)<br ALIGN="LEFT"/>optimize(X_train, y_train, X_val, y_val): Self<br ALIGN="LEFT"/>set_evaluator(evaluator: OxariEvaluator): Self<br ALIGN="LEFT"/>set_optimizer(optimizer: OxariOptimizer): Self<br ALIGN="LEFT"/>set_params()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariOptimizer" [color="aliceblue", fontcolor="black", label=<{base.common.OxariOptimizer|metric<br ALIGN="LEFT"/>n_trials : int<br ALIGN="LEFT"/>sampler<br ALIGN="LEFT"/>|<I>optimize</I>(X_train, y_train, X_val, y_val): Tuple[dict, pd.DataFrame]<br ALIGN="LEFT"/><I>score_trial</I>(trial: optuna.Trial, X_train, y_train, X_val, y_val): Number<br ALIGN="LEFT"/>set_n_startup_trials(n_startup_trials): Self<br ALIGN="LEFT"/>set_n_trials(n_trials): Self<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariPipeline" [color="aliceblue", fontcolor="black", label=<{base.common.OxariPipeline|ci_estimator<br ALIGN="LEFT"/>estimator : Optional[OxariScopeEstimator]<br ALIGN="LEFT"/>evaluation_results<br ALIGN="LEFT"/>feature_selector : Optional[OxariFeatureReducer]<br ALIGN="LEFT"/>features : NoneType<br ALIGN="LEFT"/>info<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>preprocessor : Optional[OxariPreprocessor]<br ALIGN="LEFT"/>scope_transformer : Optional[OxariScopeTransformer]<br ALIGN="LEFT"/>stats : dict<br ALIGN="LEFT"/>|clone(): Self<br ALIGN="LEFT"/>evaluate(X_train, y_train, X_test, y_test): OxariPipeline<br ALIGN="LEFT"/>evaluate_confidence(X, y): Self<br ALIGN="LEFT"/>fit(X, y): Self<br ALIGN="LEFT"/>fit_confidence(X, y): Self<br ALIGN="LEFT"/>get_features(): ArrayLike<br ALIGN="LEFT"/>optimise(X, y): Self<br ALIGN="LEFT"/>predict(X): ArrayLike<br ALIGN="LEFT"/>set_ci_estimator(estimator: OxariConfidenceEstimator): Self<br ALIGN="LEFT"/>set_estimator(estimator: OxariScopeEstimator): Self<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariPostprocessor" [color="aliceblue", fontcolor="black", label=<{base.common.OxariPostprocessor|<br ALIGN="LEFT"/>|<I>run</I>(X, y): 'OxariPostprocessor'<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariPreprocessor" [color="aliceblue", fontcolor="black", label=<{base.common.OxariPreprocessor|imputer : Optional[OxariImputer]<br ALIGN="LEFT"/>|<I>fit</I>(X, y): Self<br ALIGN="LEFT"/>set_imputer(imputer: OxariImputer): Self<br ALIGN="LEFT"/><I>transform</I>(X, y): ArrayLike<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariRegressor" [color="aliceblue", fontcolor="black", label=<{base.common.OxariRegressor|feature_names_in_ : list<br ALIGN="LEFT"/>n_features_in_<br ALIGN="LEFT"/>|<I>fit</I>(X, y): Self<br ALIGN="LEFT"/><I>predict</I>(X: ArrayLike): ArrayLike<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariScopeEstimator" [color="aliceblue", fontcolor="black", label=<{base.common.OxariScopeEstimator|n_startup_trials : int<br ALIGN="LEFT"/>n_trials : int<br ALIGN="LEFT"/>|<I>check_conformance</I>(): bool<br ALIGN="LEFT"/><I>fit</I>(X, y): Self<br ALIGN="LEFT"/><I>predict</I>(X): ArrayLike<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariScopeTransformer" [color="aliceblue", fontcolor="black", label=<{base.common.OxariScopeTransformer|<br ALIGN="LEFT"/>|fit(X, y): OxariScopeTransformer<br ALIGN="LEFT"/>fit_transform(X, y)<br ALIGN="LEFT"/><I>reverse_transform</I>(y): ArrayLike<br ALIGN="LEFT"/><I>transform</I>(y): ArrayLike<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.OxariTransformer" [color="aliceblue", fontcolor="black", label=<{base.common.OxariTransformer|<br ALIGN="LEFT"/>|<I>fit</I>(X: ArrayLike, y: ArrayLike): Self<br ALIGN="LEFT"/><I>transform</I>(X: ArrayLike): ArrayLike<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"base.common.ReducedDataMixin" [color="aliceblue", fontcolor="black", label=<{base.common.ReducedDataMixin|<br ALIGN="LEFT"/>|get_sample_indices(X: ArrayLike): ArrayLike<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"datetime.date" [color="grey", fontcolor="black", label=<{datetime.date|day<br ALIGN="LEFT"/>month<br ALIGN="LEFT"/>year<br ALIGN="LEFT"/>|ctime()<br ALIGN="LEFT"/>fromisocalendar(year, week, day)<br ALIGN="LEFT"/>fromisoformat(date_string)<br ALIGN="LEFT"/>fromordinal(n)<br ALIGN="LEFT"/>fromtimestamp(t)<br ALIGN="LEFT"/>isocalendar()<br ALIGN="LEFT"/>isoformat()<br ALIGN="LEFT"/>isoweekday()<br ALIGN="LEFT"/>replace(year, month, day)<br ALIGN="LEFT"/>strftime(fmt)<br ALIGN="LEFT"/>timetuple()<br ALIGN="LEFT"/>today()<br ALIGN="LEFT"/>toordinal()<br ALIGN="LEFT"/>weekday()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"datetime.datetime" [color="grey", fontcolor="black", label=<{datetime.datetime|fold<br ALIGN="LEFT"/>hour<br ALIGN="LEFT"/>microsecond<br ALIGN="LEFT"/>minute<br ALIGN="LEFT"/>second<br ALIGN="LEFT"/>tzinfo<br ALIGN="LEFT"/>|astimezone(tz)<br ALIGN="LEFT"/>combine(date, time, tzinfo)<br ALIGN="LEFT"/>ctime()<br ALIGN="LEFT"/>date()<br ALIGN="LEFT"/>dst()<br ALIGN="LEFT"/>fromisoformat(date_string)<br ALIGN="LEFT"/>fromtimestamp(t, tz)<br ALIGN="LEFT"/>isoformat(sep, timespec)<br ALIGN="LEFT"/>now(tz)<br ALIGN="LEFT"/>replace(year, month, day, hour, minute, second, microsecond, tzinfo)<br ALIGN="LEFT"/>strptime(date_string, format)<br ALIGN="LEFT"/>time()<br ALIGN="LEFT"/>timestamp()<br ALIGN="LEFT"/>timetuple()<br ALIGN="LEFT"/>timetz()<br ALIGN="LEFT"/>tzname()<br ALIGN="LEFT"/>utcfromtimestamp(t)<br ALIGN="LEFT"/>utcnow()<br ALIGN="LEFT"/>utcoffset()<br ALIGN="LEFT"/>utctimetuple()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"logging.Filterer" [color="grey", fontcolor="black", label=<{logging.Filterer|filters : list<br ALIGN="LEFT"/>|addFilter(filter)<br ALIGN="LEFT"/>filter(record)<br ALIGN="LEFT"/>removeFilter(filter)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"logging.Logger" [color="grey", fontcolor="black", label=<{logging.Logger|disabled : bool<br ALIGN="LEFT"/>emittedNoHandlerWarning : bool<br ALIGN="LEFT"/>handlers : list<br ALIGN="LEFT"/>level : int<br ALIGN="LEFT"/>manager : Manager<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>propagate : bool<br ALIGN="LEFT"/>|addHandler(hdlr)<br ALIGN="LEFT"/>callHandlers(record)<br ALIGN="LEFT"/>critical(msg)<br ALIGN="LEFT"/>debug(msg)<br ALIGN="LEFT"/>error(msg)<br ALIGN="LEFT"/>exception(msg)<br ALIGN="LEFT"/>fatal(msg)<br ALIGN="LEFT"/>findCaller(stack_info, stacklevel)<br ALIGN="LEFT"/>getChild(suffix)<br ALIGN="LEFT"/>getEffectiveLevel()<br ALIGN="LEFT"/>handle(record)<br ALIGN="LEFT"/>hasHandlers()<br ALIGN="LEFT"/>info(msg)<br ALIGN="LEFT"/>isEnabledFor(level)<br ALIGN="LEFT"/>log(level, msg)<br ALIGN="LEFT"/>makeRecord(name, level, fn, lno, msg, args, exc_info, func, extra, sinfo)<br ALIGN="LEFT"/>removeHandler(hdlr)<br ALIGN="LEFT"/>setLevel(level)<br ALIGN="LEFT"/>warn(msg)<br ALIGN="LEFT"/>warning(msg)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"logging.RootLogger" [color="grey", fontcolor="black", label=<{logging.RootLogger|disable : int<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"optuna.samplers._base.BaseSampler" [color="aquamarine", fontcolor="black", label=<{optuna.samplers._base.BaseSampler|<br ALIGN="LEFT"/>|<I>after_trial</I>(study: Study, trial: FrozenTrial, state: TrialState, values: Optional[Sequence[float]]): None<br ALIGN="LEFT"/><I>before_trial</I>(study: Study, trial: FrozenTrial): None<br ALIGN="LEFT"/><I>infer_relative_search_space</I>(study: Study, trial: FrozenTrial): Dict[str, BaseDistribution]<br ALIGN="LEFT"/><I>reseed_rng</I>(): None<br ALIGN="LEFT"/><I>sample_independent</I>(study: Study, trial: FrozenTrial, param_name: str, param_distribution: BaseDistribution): Any<br ALIGN="LEFT"/><I>sample_relative</I>(study: Study, trial: FrozenTrial, search_space: Dict[str, BaseDistribution]): Dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"optuna.samplers._tpe.sampler.TPESampler" [color="aquamarine", fontcolor="black", label=<{optuna.samplers._tpe.sampler.TPESampler|<br ALIGN="LEFT"/>|after_trial(study: Study, trial: FrozenTrial, state: TrialState, values: Optional[Sequence[float]]): None<br ALIGN="LEFT"/>before_trial(study: Study, trial: FrozenTrial): None<br ALIGN="LEFT"/>hyperopt_parameters(): Dict[str, Any]<br ALIGN="LEFT"/>infer_relative_search_space(study: Study, trial: FrozenTrial): Dict[str, BaseDistribution]<br ALIGN="LEFT"/>reseed_rng(): None<br ALIGN="LEFT"/>sample_independent(study: Study, trial: FrozenTrial, param_name: str, param_distribution: BaseDistribution): Any<br ALIGN="LEFT"/>sample_relative(study: Study, trial: FrozenTrial, search_space: Dict[str, BaseDistribution]): Dict[str, Any]<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"sklearn.base.BaseEstimator" [color="burlywood", fontcolor="black", label=<{sklearn.base.BaseEstimator|feature_names_in_<br ALIGN="LEFT"/>n_features_in_<br ALIGN="LEFT"/>|get_params(deep)<br ALIGN="LEFT"/>set_params()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"sklearn.base.ClassifierMixin" [color="burlywood", fontcolor="black", label=<{sklearn.base.ClassifierMixin|<br ALIGN="LEFT"/>|score(X, y, sample_weight)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"sklearn.base.MetaEstimatorMixin" [color="burlywood", fontcolor="black", label=<{sklearn.base.MetaEstimatorMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"sklearn.base.MultiOutputMixin" [color="burlywood", fontcolor="black", label=<{sklearn.base.MultiOutputMixin|<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"sklearn.base.OneToOneFeatureMixin" [color="burlywood", fontcolor="black", label=<{sklearn.base.OneToOneFeatureMixin|<br ALIGN="LEFT"/>|get_feature_names_out(input_features)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"sklearn.base.RegressorMixin" [color="burlywood", fontcolor="black", label=<{sklearn.base.RegressorMixin|<br ALIGN="LEFT"/>|score(X, y, sample_weight)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"sklearn.base.TransformerMixin" [color="burlywood", fontcolor="black", label=<{sklearn.base.TransformerMixin|<br ALIGN="LEFT"/>|fit_transform(X, y)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"sklearn.impute._base.MissingIndicator" [color="cadetblue", fontcolor="black", label=<{sklearn.impute._base.MissingIndicator|error_on_new : bool<br ALIGN="LEFT"/>features : str<br ALIGN="LEFT"/>features_<br ALIGN="LEFT"/>missing_values<br ALIGN="LEFT"/>sparse : str<br ALIGN="LEFT"/>|fit(X, y)<br ALIGN="LEFT"/>fit_transform(X, y)<br ALIGN="LEFT"/>get_feature_names_out(input_features)<br ALIGN="LEFT"/>transform(X)<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"sklearn.impute._base._BaseImputer" [color="cadetblue", fontcolor="black", label=<{sklearn.impute._base._BaseImputer|add_indicator : bool<br ALIGN="LEFT"/>indicator_ : NoneType<br ALIGN="LEFT"/>keep_empty_features : bool<br ALIGN="LEFT"/>missing_values<br ALIGN="LEFT"/>|}>, shape="record", style="filled"];
"sklearn.utils._metadata_requests._MetadataRequester" [color="chartreuse", fontcolor="black", label=<{sklearn.utils._metadata_requests._MetadataRequester|<br ALIGN="LEFT"/>|get_metadata_routing()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"sklearn.utils._set_output._SetOutputMixin" [color="chartreuse", fontcolor="black", label=<{sklearn.utils._set_output._SetOutputMixin|<br ALIGN="LEFT"/>|set_output()<br ALIGN="LEFT"/>}>, shape="record", style="filled"];
"_datetime.datetime.datetime" -> "_datetime.datetime.date" [arrowhead="empty", arrowtail="none"];
"base.common.DefaultClassificationEvaluator" -> "base.common.OxariEvaluator" [arrowhead="empty", arrowtail="none"];
"base.common.DefaultClusterEvaluator" -> "base.common.OxariEvaluator" [arrowhead="empty", arrowtail="none"];
"base.common.DefaultOptimizer" -> "base.common.OxariOptimizer" [arrowhead="empty", arrowtail="none"];
"base.common.DefaultPostprocessor" -> "base.common.OxariPostprocessor" [arrowhead="empty", arrowtail="none"];
"base.common.DefaultRegressorEvaluator" -> "base.common.OxariEvaluator" [arrowhead="empty", arrowtail="none"];
"base.common.DummyConfidenceEstimator" -> "base.common.OxariConfidenceEstimator" [arrowhead="empty", arrowtail="none"];
"base.common.OxariClassifier" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariClassifier" -> "base.common.OxariMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariClassifier" -> "sklearn.base.BaseEstimator" [arrowhead="empty", arrowtail="none"];
"base.common.OxariClassifier" -> "sklearn.base.ClassifierMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariConfidenceEstimator" -> "base.common.OxariScopeEstimator" [arrowhead="empty", arrowtail="none"];
"base.common.OxariConfidenceEstimator" -> "sklearn.base.MultiOutputMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariConfidenceEstimator.DefaultConfidenceEvaluator" -> "base.common.OxariEvaluator" [arrowhead="empty", arrowtail="none"];
"base.common.OxariEvaluator" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariFeatureReducer" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariFeatureReducer" -> "base.common.OxariTransformer" [arrowhead="empty", arrowtail="none"];
"base.common.OxariFeatureTransformer" -> "base.common.OxariTransformer" [arrowhead="empty", arrowtail="none"];
"base.common.OxariFeatureTransformer" -> "sklearn.base.OneToOneFeatureMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariImputer" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariImputer" -> "base.common.OxariMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariImputer" -> "sklearn.impute._base._BaseImputer" [arrowhead="empty", arrowtail="none"];
"base.common.OxariImputer.DefaultImputerEvaluator" -> "base.common.OxariEvaluator" [arrowhead="empty", arrowtail="none"];
"base.common.OxariLinearAnnualReduction" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariLinearAnnualReduction" -> "base.common.OxariMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariLinearAnnualReduction" -> "base.common.OxariRegressor" [arrowhead="empty", arrowtail="none"];
"base.common.OxariLinearAnnualReduction" -> "base.common.OxariTransformer" [arrowhead="empty", arrowtail="none"];
"base.common.OxariLoggerMixin" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariMetaModel" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariMetaModel" -> "base.common.OxariRegressor" [arrowhead="empty", arrowtail="none"];
"base.common.OxariMetaModel" -> "sklearn.base.MultiOutputMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariMixin" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariMixin" -> "base.common.OxariLoggerMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariOptimizer" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariOptimizer" -> "base.common.OxariLoggerMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariPipeline" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariPipeline" -> "base.common.OxariRegressor" [arrowhead="empty", arrowtail="none"];
"base.common.OxariPipeline" -> "sklearn.base.MetaEstimatorMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariPostprocessor" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariPostprocessor" -> "base.common.OxariMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariPreprocessor" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariPreprocessor" -> "base.common.OxariTransformer" [arrowhead="empty", arrowtail="none"];
"base.common.OxariRegressor" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariRegressor" -> "base.common.OxariMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariRegressor" -> "sklearn.base.BaseEstimator" [arrowhead="empty", arrowtail="none"];
"base.common.OxariRegressor" -> "sklearn.base.RegressorMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariScopeEstimator" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariScopeEstimator" -> "base.common.OxariRegressor" [arrowhead="empty", arrowtail="none"];
"base.common.OxariScopeTransformer" -> "base.common.OxariTransformer" [arrowhead="empty", arrowtail="none"];
"base.common.OxariTransformer" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"base.common.OxariTransformer" -> "base.common.OxariMixin" [arrowhead="empty", arrowtail="none"];
"base.common.OxariTransformer" -> "sklearn.base.BaseEstimator" [arrowhead="empty", arrowtail="none"];
"base.common.OxariTransformer" -> "sklearn.base.TransformerMixin" [arrowhead="empty", arrowtail="none"];
"datetime.datetime" -> "datetime.date" [arrowhead="empty", arrowtail="none"];
"logging.Logger" -> "logging.Filterer" [arrowhead="empty", arrowtail="none"];
"logging.RootLogger" -> "logging.Logger" [arrowhead="empty", arrowtail="none"];
"optuna.samplers._base.BaseSampler" -> "abc.ABC" [arrowhead="empty", arrowtail="none"];
"optuna.samplers._tpe.sampler.TPESampler" -> "optuna.samplers._base.BaseSampler" [arrowhead="empty", arrowtail="none"];
"sklearn.base.BaseEstimator" -> "sklearn.utils._metadata_requests._MetadataRequester" [arrowhead="empty", arrowtail="none"];
"sklearn.base.TransformerMixin" -> "sklearn.utils._set_output._SetOutputMixin" [arrowhead="empty", arrowtail="none"];
"sklearn.impute._base.MissingIndicator" -> "sklearn.base.BaseEstimator" [arrowhead="empty", arrowtail="none"];
"sklearn.impute._base.MissingIndicator" -> "sklearn.base.TransformerMixin" [arrowhead="empty", arrowtail="none"];
"sklearn.impute._base._BaseImputer" -> "sklearn.base.BaseEstimator" [arrowhead="empty", arrowtail="none"];
"sklearn.impute._base._BaseImputer" -> "sklearn.base.TransformerMixin" [arrowhead="empty", arrowtail="none"];
"_datetime.datetime.datetime" -> "base.common.OxariMetaModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="creation_time", style="solid"];
"base.common.DefaultRegressorEvaluator" -> "base.common.OxariPipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_evaluator", style="solid"];
"base.common.DummyConfidenceEstimator" -> "base.common.OxariPipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ci_estimator", style="solid"];
"base.common.OxariScopeEstimator" -> "base.common.OxariPipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="ci_estimator", style="solid"];
"datetime.datetime" -> "base.common.OxariMetaModel" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="creation_time", style="solid"];
"logging.Logger" -> "base.common.OxariLoggerMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logger", style="solid"];
"logging.RootLogger" -> "base.common.OxariLoggerMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logger", style="solid"];
"optuna.samplers._tpe.sampler.TPESampler" -> "base.common.OxariOptimizer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sampler", style="solid"];
"sklearn.impute._base.MissingIndicator" -> "sklearn.impute._base._BaseImputer" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="indicator_", style="solid"];
"base.common.OxariEvaluator" -> "base.common.OxariMixin" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_evaluator", style="solid"];
"base.common.OxariImputer" -> "base.common.OxariPreprocessor" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="imputer", style="solid"];
"base.common.OxariOptimizer" -> "base.common.OxariMixin" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_optimizer", style="solid"];
"base.common.OxariPipeline" -> "base.common.OxariConfidenceEstimator" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="pipeline", style="solid"];
"base.common.OxariScopeEstimator" -> "base.common.OxariPipeline" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="estimator", style="solid"];
}
